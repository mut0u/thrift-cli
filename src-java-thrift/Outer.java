/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-11-15")
public class Outer implements org.apache.thrift.TBase<Outer, Outer._Fields>, java.io.Serializable, Cloneable, Comparable<Outer> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Outer");

  private static final org.apache.thrift.protocol.TField OUTER_STR_FIELD_DESC = new org.apache.thrift.protocol.TField("outer_str", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField INNER_FIELD_DESC = new org.apache.thrift.protocol.TField("inner", org.apache.thrift.protocol.TType.STRUCT, (short)2);
  private static final org.apache.thrift.protocol.TField OUTER_DOUBLE_FIELD_DESC = new org.apache.thrift.protocol.TField("outer_double", org.apache.thrift.protocol.TType.DOUBLE, (short)7);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new OuterStandardSchemeFactory());
    schemes.put(TupleScheme.class, new OuterTupleSchemeFactory());
  }

  public String outer_str; // required
  public Inner inner; // required
  public double outer_double; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    OUTER_STR((short)1, "outer_str"),
    INNER((short)2, "inner"),
    OUTER_DOUBLE((short)7, "outer_double");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // OUTER_STR
          return OUTER_STR;
        case 2: // INNER
          return INNER;
        case 7: // OUTER_DOUBLE
          return OUTER_DOUBLE;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __OUTER_DOUBLE_ISSET_ID = 0;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.OUTER_STR, new org.apache.thrift.meta_data.FieldMetaData("outer_str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.INNER, new org.apache.thrift.meta_data.FieldMetaData("inner", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRUCT        , "Inner")));
    tmpMap.put(_Fields.OUTER_DOUBLE, new org.apache.thrift.meta_data.FieldMetaData("outer_double", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Outer.class, metaDataMap);
  }

  public Outer() {
  }

  public Outer(
    String outer_str,
    Inner inner,
    double outer_double)
  {
    this();
    this.outer_str = outer_str;
    this.inner = inner;
    this.outer_double = outer_double;
    setOuter_doubleIsSet(true);
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public Outer(Outer other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetOuter_str()) {
      this.outer_str = other.outer_str;
    }
    if (other.isSetInner()) {
      this.inner = other.inner;
    }
    this.outer_double = other.outer_double;
  }

  public Outer deepCopy() {
    return new Outer(this);
  }

  @Override
  public void clear() {
    this.outer_str = null;
    this.inner = null;
    setOuter_doubleIsSet(false);
    this.outer_double = 0.0;
  }

  public String getOuter_str() {
    return this.outer_str;
  }

  public Outer setOuter_str(String outer_str) {
    this.outer_str = outer_str;
    return this;
  }

  public void unsetOuter_str() {
    this.outer_str = null;
  }

  /** Returns true if field outer_str is set (has been assigned a value) and false otherwise */
  public boolean isSetOuter_str() {
    return this.outer_str != null;
  }

  public void setOuter_strIsSet(boolean value) {
    if (!value) {
      this.outer_str = null;
    }
  }

  public Inner getInner() {
    return this.inner;
  }

  public Outer setInner(Inner inner) {
    this.inner = inner;
    return this;
  }

  public void unsetInner() {
    this.inner = null;
  }

  /** Returns true if field inner is set (has been assigned a value) and false otherwise */
  public boolean isSetInner() {
    return this.inner != null;
  }

  public void setInnerIsSet(boolean value) {
    if (!value) {
      this.inner = null;
    }
  }

  public double getOuter_double() {
    return this.outer_double;
  }

  public Outer setOuter_double(double outer_double) {
    this.outer_double = outer_double;
    setOuter_doubleIsSet(true);
    return this;
  }

  public void unsetOuter_double() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __OUTER_DOUBLE_ISSET_ID);
  }

  /** Returns true if field outer_double is set (has been assigned a value) and false otherwise */
  public boolean isSetOuter_double() {
    return EncodingUtils.testBit(__isset_bitfield, __OUTER_DOUBLE_ISSET_ID);
  }

  public void setOuter_doubleIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __OUTER_DOUBLE_ISSET_ID, value);
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case OUTER_STR:
      if (value == null) {
        unsetOuter_str();
      } else {
        setOuter_str((String)value);
      }
      break;

    case INNER:
      if (value == null) {
        unsetInner();
      } else {
        setInner((Inner)value);
      }
      break;

    case OUTER_DOUBLE:
      if (value == null) {
        unsetOuter_double();
      } else {
        setOuter_double((Double)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case OUTER_STR:
      return getOuter_str();

    case INNER:
      return getInner();

    case OUTER_DOUBLE:
      return Double.valueOf(getOuter_double());

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case OUTER_STR:
      return isSetOuter_str();
    case INNER:
      return isSetInner();
    case OUTER_DOUBLE:
      return isSetOuter_double();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof Outer)
      return this.equals((Outer)that);
    return false;
  }

  public boolean equals(Outer that) {
    if (that == null)
      return false;

    boolean this_present_outer_str = true && this.isSetOuter_str();
    boolean that_present_outer_str = true && that.isSetOuter_str();
    if (this_present_outer_str || that_present_outer_str) {
      if (!(this_present_outer_str && that_present_outer_str))
        return false;
      if (!this.outer_str.equals(that.outer_str))
        return false;
    }

    boolean this_present_inner = true && this.isSetInner();
    boolean that_present_inner = true && that.isSetInner();
    if (this_present_inner || that_present_inner) {
      if (!(this_present_inner && that_present_inner))
        return false;
      if (!this.inner.equals(that.inner))
        return false;
    }

    boolean this_present_outer_double = true;
    boolean that_present_outer_double = true;
    if (this_present_outer_double || that_present_outer_double) {
      if (!(this_present_outer_double && that_present_outer_double))
        return false;
      if (this.outer_double != that.outer_double)
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_outer_str = true && (isSetOuter_str());
    list.add(present_outer_str);
    if (present_outer_str)
      list.add(outer_str);

    boolean present_inner = true && (isSetInner());
    list.add(present_inner);
    if (present_inner)
      list.add(inner);

    boolean present_outer_double = true;
    list.add(present_outer_double);
    if (present_outer_double)
      list.add(outer_double);

    return list.hashCode();
  }

  @Override
  public int compareTo(Outer other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetOuter_str()).compareTo(other.isSetOuter_str());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOuter_str()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outer_str, other.outer_str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInner()).compareTo(other.isSetInner());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInner()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.inner, other.inner);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetOuter_double()).compareTo(other.isSetOuter_double());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetOuter_double()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.outer_double, other.outer_double);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("Outer(");
    boolean first = true;

    sb.append("outer_str:");
    if (this.outer_str == null) {
      sb.append("null");
    } else {
      sb.append(this.outer_str);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("inner:");
    if (this.inner == null) {
      sb.append("null");
    } else {
      sb.append(this.inner);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("outer_double:");
    sb.append(this.outer_double);
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class OuterStandardSchemeFactory implements SchemeFactory {
    public OuterStandardScheme getScheme() {
      return new OuterStandardScheme();
    }
  }

  private static class OuterStandardScheme extends StandardScheme<Outer> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, Outer struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // OUTER_STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.outer_str = iprot.readString();
              struct.setOuter_strIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // INNER
            if (schemeField.type == org.apache.thrift.protocol.TType.STRUCT) {
              struct.inner = new Inner();
              struct.inner.read(iprot);
              struct.setInnerIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // OUTER_DOUBLE
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.outer_double = iprot.readDouble();
              struct.setOuter_doubleIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, Outer struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.outer_str != null) {
        oprot.writeFieldBegin(OUTER_STR_FIELD_DESC);
        oprot.writeString(struct.outer_str);
        oprot.writeFieldEnd();
      }
      if (struct.inner != null) {
        oprot.writeFieldBegin(INNER_FIELD_DESC);
        struct.inner.write(oprot);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(OUTER_DOUBLE_FIELD_DESC);
      oprot.writeDouble(struct.outer_double);
      oprot.writeFieldEnd();
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class OuterTupleSchemeFactory implements SchemeFactory {
    public OuterTupleScheme getScheme() {
      return new OuterTupleScheme();
    }
  }

  private static class OuterTupleScheme extends TupleScheme<Outer> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, Outer struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetOuter_str()) {
        optionals.set(0);
      }
      if (struct.isSetInner()) {
        optionals.set(1);
      }
      if (struct.isSetOuter_double()) {
        optionals.set(2);
      }
      oprot.writeBitSet(optionals, 3);
      if (struct.isSetOuter_str()) {
        oprot.writeString(struct.outer_str);
      }
      if (struct.isSetInner()) {
        struct.inner.write(oprot);
      }
      if (struct.isSetOuter_double()) {
        oprot.writeDouble(struct.outer_double);
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, Outer struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(3);
      if (incoming.get(0)) {
        struct.outer_str = iprot.readString();
        struct.setOuter_strIsSet(true);
      }
      if (incoming.get(1)) {
        struct.inner = new Inner();
        struct.inner.read(iprot);
        struct.setInnerIsSet(true);
      }
      if (incoming.get(2)) {
        struct.outer_double = iprot.readDouble();
        struct.setOuter_doubleIsSet(true);
      }
    }
  }

}

