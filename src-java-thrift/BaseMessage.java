/**
 * Autogenerated by Thrift Compiler (0.9.2)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
import org.apache.thrift.scheme.IScheme;
import org.apache.thrift.scheme.SchemeFactory;
import org.apache.thrift.scheme.StandardScheme;

import org.apache.thrift.scheme.TupleScheme;
import org.apache.thrift.protocol.TTupleProtocol;
import org.apache.thrift.protocol.TProtocolException;
import org.apache.thrift.EncodingUtils;
import org.apache.thrift.TException;
import org.apache.thrift.async.AsyncMethodCallback;
import org.apache.thrift.server.AbstractNonblockingServer.*;
import java.util.List;
import java.util.ArrayList;
import java.util.Map;
import java.util.HashMap;
import java.util.EnumMap;
import java.util.Set;
import java.util.HashSet;
import java.util.EnumSet;
import java.util.Collections;
import java.util.BitSet;
import java.nio.ByteBuffer;
import java.util.Arrays;
import javax.annotation.Generated;
import org.slf4j.Logger;
import org.slf4j.LoggerFactory;

@SuppressWarnings({"cast", "rawtypes", "serial", "unchecked"})
@Generated(value = "Autogenerated by Thrift Compiler (0.9.2)", date = "2019-11-15")
public class BaseMessage implements org.apache.thrift.TBase<BaseMessage, BaseMessage._Fields>, java.io.Serializable, Cloneable, Comparable<BaseMessage> {
  private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("BaseMessage");

  private static final org.apache.thrift.protocol.TField STR_FIELD_DESC = new org.apache.thrift.protocol.TField("str", org.apache.thrift.protocol.TType.STRING, (short)1);
  private static final org.apache.thrift.protocol.TField FLAG_FIELD_DESC = new org.apache.thrift.protocol.TField("flag", org.apache.thrift.protocol.TType.BOOL, (short)2);
  private static final org.apache.thrift.protocol.TField B_FIELD_DESC = new org.apache.thrift.protocol.TField("b", org.apache.thrift.protocol.TType.BYTE, (short)3);
  private static final org.apache.thrift.protocol.TField INT16_FIELD_DESC = new org.apache.thrift.protocol.TField("int16", org.apache.thrift.protocol.TType.I16, (short)4);
  private static final org.apache.thrift.protocol.TField INT32_FIELD_DESC = new org.apache.thrift.protocol.TField("int32", org.apache.thrift.protocol.TType.I32, (short)5);
  private static final org.apache.thrift.protocol.TField INT64_FIELD_DESC = new org.apache.thrift.protocol.TField("int64", org.apache.thrift.protocol.TType.I64, (short)6);
  private static final org.apache.thrift.protocol.TField D_FIELD_DESC = new org.apache.thrift.protocol.TField("d", org.apache.thrift.protocol.TType.DOUBLE, (short)7);
  private static final org.apache.thrift.protocol.TField STRS_FIELD_DESC = new org.apache.thrift.protocol.TField("strs", org.apache.thrift.protocol.TType.LIST, (short)8);
  private static final org.apache.thrift.protocol.TField MSTRS_FIELD_DESC = new org.apache.thrift.protocol.TField("mstrs", org.apache.thrift.protocol.TType.MAP, (short)9);
  private static final org.apache.thrift.protocol.TField SINT_FIELD_DESC = new org.apache.thrift.protocol.TField("sint", org.apache.thrift.protocol.TType.SET, (short)10);
  private static final org.apache.thrift.protocol.TField STATUS_FIELD_DESC = new org.apache.thrift.protocol.TField("status", org.apache.thrift.protocol.TType.I32, (short)11);

  private static final Map<Class<? extends IScheme>, SchemeFactory> schemes = new HashMap<Class<? extends IScheme>, SchemeFactory>();
  static {
    schemes.put(StandardScheme.class, new BaseMessageStandardSchemeFactory());
    schemes.put(TupleScheme.class, new BaseMessageTupleSchemeFactory());
  }

  public String str; // required
  public boolean flag; // required
  public byte b; // required
  public short int16; // required
  public int int32; // required
  public long int64; // required
  public double d; // required
  public List<String> strs; // required
  public Map<String,Integer> mstrs; // required
  public Set<Integer> sint; // required
  /**
   * 
   * @see Status
   */
  public Status status; // required

  /** The set of fields this struct contains, along with convenience methods for finding and manipulating them. */
  public enum _Fields implements org.apache.thrift.TFieldIdEnum {
    STR((short)1, "str"),
    FLAG((short)2, "flag"),
    B((short)3, "b"),
    INT16((short)4, "int16"),
    INT32((short)5, "int32"),
    INT64((short)6, "int64"),
    D((short)7, "d"),
    STRS((short)8, "strs"),
    MSTRS((short)9, "mstrs"),
    SINT((short)10, "sint"),
    /**
     * 
     * @see Status
     */
    STATUS((short)11, "status");

    private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

    static {
      for (_Fields field : EnumSet.allOf(_Fields.class)) {
        byName.put(field.getFieldName(), field);
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, or null if its not found.
     */
    public static _Fields findByThriftId(int fieldId) {
      switch(fieldId) {
        case 1: // STR
          return STR;
        case 2: // FLAG
          return FLAG;
        case 3: // B
          return B;
        case 4: // INT16
          return INT16;
        case 5: // INT32
          return INT32;
        case 6: // INT64
          return INT64;
        case 7: // D
          return D;
        case 8: // STRS
          return STRS;
        case 9: // MSTRS
          return MSTRS;
        case 10: // SINT
          return SINT;
        case 11: // STATUS
          return STATUS;
        default:
          return null;
      }
    }

    /**
     * Find the _Fields constant that matches fieldId, throwing an exception
     * if it is not found.
     */
    public static _Fields findByThriftIdOrThrow(int fieldId) {
      _Fields fields = findByThriftId(fieldId);
      if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
      return fields;
    }

    /**
     * Find the _Fields constant that matches name, or null if its not found.
     */
    public static _Fields findByName(String name) {
      return byName.get(name);
    }

    private final short _thriftId;
    private final String _fieldName;

    _Fields(short thriftId, String fieldName) {
      _thriftId = thriftId;
      _fieldName = fieldName;
    }

    public short getThriftFieldId() {
      return _thriftId;
    }

    public String getFieldName() {
      return _fieldName;
    }
  }

  // isset id assignments
  private static final int __FLAG_ISSET_ID = 0;
  private static final int __B_ISSET_ID = 1;
  private static final int __INT16_ISSET_ID = 2;
  private static final int __INT32_ISSET_ID = 3;
  private static final int __INT64_ISSET_ID = 4;
  private static final int __D_ISSET_ID = 5;
  private byte __isset_bitfield = 0;
  public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;
  static {
    Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
    tmpMap.put(_Fields.STR, new org.apache.thrift.meta_data.FieldMetaData("str", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
    tmpMap.put(_Fields.FLAG, new org.apache.thrift.meta_data.FieldMetaData("flag", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BOOL)));
    tmpMap.put(_Fields.B, new org.apache.thrift.meta_data.FieldMetaData("b", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.BYTE)));
    tmpMap.put(_Fields.INT16, new org.apache.thrift.meta_data.FieldMetaData("int16", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
    tmpMap.put(_Fields.INT32, new org.apache.thrift.meta_data.FieldMetaData("int32", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
    tmpMap.put(_Fields.INT64, new org.apache.thrift.meta_data.FieldMetaData("int64", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
    tmpMap.put(_Fields.D, new org.apache.thrift.meta_data.FieldMetaData("d", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.DOUBLE)));
    tmpMap.put(_Fields.STRS, new org.apache.thrift.meta_data.FieldMetaData("strs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING))));
    tmpMap.put(_Fields.MSTRS, new org.apache.thrift.meta_data.FieldMetaData("mstrs", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.MapMetaData(org.apache.thrift.protocol.TType.MAP, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING), 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.SINT, new org.apache.thrift.meta_data.FieldMetaData("sint", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.SetMetaData(org.apache.thrift.protocol.TType.SET, 
            new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
    tmpMap.put(_Fields.STATUS, new org.apache.thrift.meta_data.FieldMetaData("status", org.apache.thrift.TFieldRequirementType.DEFAULT, 
        new org.apache.thrift.meta_data.EnumMetaData(org.apache.thrift.protocol.TType.ENUM, Status.class)));
    metaDataMap = Collections.unmodifiableMap(tmpMap);
    org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(BaseMessage.class, metaDataMap);
  }

  public BaseMessage() {
  }

  public BaseMessage(
    String str,
    boolean flag,
    byte b,
    short int16,
    int int32,
    long int64,
    double d,
    List<String> strs,
    Map<String,Integer> mstrs,
    Set<Integer> sint,
    Status status)
  {
    this();
    this.str = str;
    this.flag = flag;
    setFlagIsSet(true);
    this.b = b;
    setBIsSet(true);
    this.int16 = int16;
    setInt16IsSet(true);
    this.int32 = int32;
    setInt32IsSet(true);
    this.int64 = int64;
    setInt64IsSet(true);
    this.d = d;
    setDIsSet(true);
    this.strs = strs;
    this.mstrs = mstrs;
    this.sint = sint;
    this.status = status;
  }

  /**
   * Performs a deep copy on <i>other</i>.
   */
  public BaseMessage(BaseMessage other) {
    __isset_bitfield = other.__isset_bitfield;
    if (other.isSetStr()) {
      this.str = other.str;
    }
    this.flag = other.flag;
    this.b = other.b;
    this.int16 = other.int16;
    this.int32 = other.int32;
    this.int64 = other.int64;
    this.d = other.d;
    if (other.isSetStrs()) {
      List<String> __this__strs = new ArrayList<String>(other.strs);
      this.strs = __this__strs;
    }
    if (other.isSetMstrs()) {
      Map<String,Integer> __this__mstrs = new HashMap<String,Integer>(other.mstrs);
      this.mstrs = __this__mstrs;
    }
    if (other.isSetSint()) {
      Set<Integer> __this__sint = new HashSet<Integer>(other.sint);
      this.sint = __this__sint;
    }
    if (other.isSetStatus()) {
      this.status = other.status;
    }
  }

  public BaseMessage deepCopy() {
    return new BaseMessage(this);
  }

  @Override
  public void clear() {
    this.str = null;
    setFlagIsSet(false);
    this.flag = false;
    setBIsSet(false);
    this.b = 0;
    setInt16IsSet(false);
    this.int16 = 0;
    setInt32IsSet(false);
    this.int32 = 0;
    setInt64IsSet(false);
    this.int64 = 0;
    setDIsSet(false);
    this.d = 0.0;
    this.strs = null;
    this.mstrs = null;
    this.sint = null;
    this.status = null;
  }

  public String getStr() {
    return this.str;
  }

  public BaseMessage setStr(String str) {
    this.str = str;
    return this;
  }

  public void unsetStr() {
    this.str = null;
  }

  /** Returns true if field str is set (has been assigned a value) and false otherwise */
  public boolean isSetStr() {
    return this.str != null;
  }

  public void setStrIsSet(boolean value) {
    if (!value) {
      this.str = null;
    }
  }

  public boolean isFlag() {
    return this.flag;
  }

  public BaseMessage setFlag(boolean flag) {
    this.flag = flag;
    setFlagIsSet(true);
    return this;
  }

  public void unsetFlag() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  /** Returns true if field flag is set (has been assigned a value) and false otherwise */
  public boolean isSetFlag() {
    return EncodingUtils.testBit(__isset_bitfield, __FLAG_ISSET_ID);
  }

  public void setFlagIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __FLAG_ISSET_ID, value);
  }

  public byte getB() {
    return this.b;
  }

  public BaseMessage setB(byte b) {
    this.b = b;
    setBIsSet(true);
    return this;
  }

  public void unsetB() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __B_ISSET_ID);
  }

  /** Returns true if field b is set (has been assigned a value) and false otherwise */
  public boolean isSetB() {
    return EncodingUtils.testBit(__isset_bitfield, __B_ISSET_ID);
  }

  public void setBIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __B_ISSET_ID, value);
  }

  public short getInt16() {
    return this.int16;
  }

  public BaseMessage setInt16(short int16) {
    this.int16 = int16;
    setInt16IsSet(true);
    return this;
  }

  public void unsetInt16() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT16_ISSET_ID);
  }

  /** Returns true if field int16 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt16() {
    return EncodingUtils.testBit(__isset_bitfield, __INT16_ISSET_ID);
  }

  public void setInt16IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT16_ISSET_ID, value);
  }

  public int getInt32() {
    return this.int32;
  }

  public BaseMessage setInt32(int int32) {
    this.int32 = int32;
    setInt32IsSet(true);
    return this;
  }

  public void unsetInt32() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT32_ISSET_ID);
  }

  /** Returns true if field int32 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt32() {
    return EncodingUtils.testBit(__isset_bitfield, __INT32_ISSET_ID);
  }

  public void setInt32IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT32_ISSET_ID, value);
  }

  public long getInt64() {
    return this.int64;
  }

  public BaseMessage setInt64(long int64) {
    this.int64 = int64;
    setInt64IsSet(true);
    return this;
  }

  public void unsetInt64() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __INT64_ISSET_ID);
  }

  /** Returns true if field int64 is set (has been assigned a value) and false otherwise */
  public boolean isSetInt64() {
    return EncodingUtils.testBit(__isset_bitfield, __INT64_ISSET_ID);
  }

  public void setInt64IsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __INT64_ISSET_ID, value);
  }

  public double getD() {
    return this.d;
  }

  public BaseMessage setD(double d) {
    this.d = d;
    setDIsSet(true);
    return this;
  }

  public void unsetD() {
    __isset_bitfield = EncodingUtils.clearBit(__isset_bitfield, __D_ISSET_ID);
  }

  /** Returns true if field d is set (has been assigned a value) and false otherwise */
  public boolean isSetD() {
    return EncodingUtils.testBit(__isset_bitfield, __D_ISSET_ID);
  }

  public void setDIsSet(boolean value) {
    __isset_bitfield = EncodingUtils.setBit(__isset_bitfield, __D_ISSET_ID, value);
  }

  public int getStrsSize() {
    return (this.strs == null) ? 0 : this.strs.size();
  }

  public java.util.Iterator<String> getStrsIterator() {
    return (this.strs == null) ? null : this.strs.iterator();
  }

  public void addToStrs(String elem) {
    if (this.strs == null) {
      this.strs = new ArrayList<String>();
    }
    this.strs.add(elem);
  }

  public List<String> getStrs() {
    return this.strs;
  }

  public BaseMessage setStrs(List<String> strs) {
    this.strs = strs;
    return this;
  }

  public void unsetStrs() {
    this.strs = null;
  }

  /** Returns true if field strs is set (has been assigned a value) and false otherwise */
  public boolean isSetStrs() {
    return this.strs != null;
  }

  public void setStrsIsSet(boolean value) {
    if (!value) {
      this.strs = null;
    }
  }

  public int getMstrsSize() {
    return (this.mstrs == null) ? 0 : this.mstrs.size();
  }

  public void putToMstrs(String key, int val) {
    if (this.mstrs == null) {
      this.mstrs = new HashMap<String,Integer>();
    }
    this.mstrs.put(key, val);
  }

  public Map<String,Integer> getMstrs() {
    return this.mstrs;
  }

  public BaseMessage setMstrs(Map<String,Integer> mstrs) {
    this.mstrs = mstrs;
    return this;
  }

  public void unsetMstrs() {
    this.mstrs = null;
  }

  /** Returns true if field mstrs is set (has been assigned a value) and false otherwise */
  public boolean isSetMstrs() {
    return this.mstrs != null;
  }

  public void setMstrsIsSet(boolean value) {
    if (!value) {
      this.mstrs = null;
    }
  }

  public int getSintSize() {
    return (this.sint == null) ? 0 : this.sint.size();
  }

  public java.util.Iterator<Integer> getSintIterator() {
    return (this.sint == null) ? null : this.sint.iterator();
  }

  public void addToSint(int elem) {
    if (this.sint == null) {
      this.sint = new HashSet<Integer>();
    }
    this.sint.add(elem);
  }

  public Set<Integer> getSint() {
    return this.sint;
  }

  public BaseMessage setSint(Set<Integer> sint) {
    this.sint = sint;
    return this;
  }

  public void unsetSint() {
    this.sint = null;
  }

  /** Returns true if field sint is set (has been assigned a value) and false otherwise */
  public boolean isSetSint() {
    return this.sint != null;
  }

  public void setSintIsSet(boolean value) {
    if (!value) {
      this.sint = null;
    }
  }

  /**
   * 
   * @see Status
   */
  public Status getStatus() {
    return this.status;
  }

  /**
   * 
   * @see Status
   */
  public BaseMessage setStatus(Status status) {
    this.status = status;
    return this;
  }

  public void unsetStatus() {
    this.status = null;
  }

  /** Returns true if field status is set (has been assigned a value) and false otherwise */
  public boolean isSetStatus() {
    return this.status != null;
  }

  public void setStatusIsSet(boolean value) {
    if (!value) {
      this.status = null;
    }
  }

  public void setFieldValue(_Fields field, Object value) {
    switch (field) {
    case STR:
      if (value == null) {
        unsetStr();
      } else {
        setStr((String)value);
      }
      break;

    case FLAG:
      if (value == null) {
        unsetFlag();
      } else {
        setFlag((Boolean)value);
      }
      break;

    case B:
      if (value == null) {
        unsetB();
      } else {
        setB((Byte)value);
      }
      break;

    case INT16:
      if (value == null) {
        unsetInt16();
      } else {
        setInt16((Short)value);
      }
      break;

    case INT32:
      if (value == null) {
        unsetInt32();
      } else {
        setInt32((Integer)value);
      }
      break;

    case INT64:
      if (value == null) {
        unsetInt64();
      } else {
        setInt64((Long)value);
      }
      break;

    case D:
      if (value == null) {
        unsetD();
      } else {
        setD((Double)value);
      }
      break;

    case STRS:
      if (value == null) {
        unsetStrs();
      } else {
        setStrs((List<String>)value);
      }
      break;

    case MSTRS:
      if (value == null) {
        unsetMstrs();
      } else {
        setMstrs((Map<String,Integer>)value);
      }
      break;

    case SINT:
      if (value == null) {
        unsetSint();
      } else {
        setSint((Set<Integer>)value);
      }
      break;

    case STATUS:
      if (value == null) {
        unsetStatus();
      } else {
        setStatus((Status)value);
      }
      break;

    }
  }

  public Object getFieldValue(_Fields field) {
    switch (field) {
    case STR:
      return getStr();

    case FLAG:
      return Boolean.valueOf(isFlag());

    case B:
      return Byte.valueOf(getB());

    case INT16:
      return Short.valueOf(getInt16());

    case INT32:
      return Integer.valueOf(getInt32());

    case INT64:
      return Long.valueOf(getInt64());

    case D:
      return Double.valueOf(getD());

    case STRS:
      return getStrs();

    case MSTRS:
      return getMstrs();

    case SINT:
      return getSint();

    case STATUS:
      return getStatus();

    }
    throw new IllegalStateException();
  }

  /** Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise */
  public boolean isSet(_Fields field) {
    if (field == null) {
      throw new IllegalArgumentException();
    }

    switch (field) {
    case STR:
      return isSetStr();
    case FLAG:
      return isSetFlag();
    case B:
      return isSetB();
    case INT16:
      return isSetInt16();
    case INT32:
      return isSetInt32();
    case INT64:
      return isSetInt64();
    case D:
      return isSetD();
    case STRS:
      return isSetStrs();
    case MSTRS:
      return isSetMstrs();
    case SINT:
      return isSetSint();
    case STATUS:
      return isSetStatus();
    }
    throw new IllegalStateException();
  }

  @Override
  public boolean equals(Object that) {
    if (that == null)
      return false;
    if (that instanceof BaseMessage)
      return this.equals((BaseMessage)that);
    return false;
  }

  public boolean equals(BaseMessage that) {
    if (that == null)
      return false;

    boolean this_present_str = true && this.isSetStr();
    boolean that_present_str = true && that.isSetStr();
    if (this_present_str || that_present_str) {
      if (!(this_present_str && that_present_str))
        return false;
      if (!this.str.equals(that.str))
        return false;
    }

    boolean this_present_flag = true;
    boolean that_present_flag = true;
    if (this_present_flag || that_present_flag) {
      if (!(this_present_flag && that_present_flag))
        return false;
      if (this.flag != that.flag)
        return false;
    }

    boolean this_present_b = true;
    boolean that_present_b = true;
    if (this_present_b || that_present_b) {
      if (!(this_present_b && that_present_b))
        return false;
      if (this.b != that.b)
        return false;
    }

    boolean this_present_int16 = true;
    boolean that_present_int16 = true;
    if (this_present_int16 || that_present_int16) {
      if (!(this_present_int16 && that_present_int16))
        return false;
      if (this.int16 != that.int16)
        return false;
    }

    boolean this_present_int32 = true;
    boolean that_present_int32 = true;
    if (this_present_int32 || that_present_int32) {
      if (!(this_present_int32 && that_present_int32))
        return false;
      if (this.int32 != that.int32)
        return false;
    }

    boolean this_present_int64 = true;
    boolean that_present_int64 = true;
    if (this_present_int64 || that_present_int64) {
      if (!(this_present_int64 && that_present_int64))
        return false;
      if (this.int64 != that.int64)
        return false;
    }

    boolean this_present_d = true;
    boolean that_present_d = true;
    if (this_present_d || that_present_d) {
      if (!(this_present_d && that_present_d))
        return false;
      if (this.d != that.d)
        return false;
    }

    boolean this_present_strs = true && this.isSetStrs();
    boolean that_present_strs = true && that.isSetStrs();
    if (this_present_strs || that_present_strs) {
      if (!(this_present_strs && that_present_strs))
        return false;
      if (!this.strs.equals(that.strs))
        return false;
    }

    boolean this_present_mstrs = true && this.isSetMstrs();
    boolean that_present_mstrs = true && that.isSetMstrs();
    if (this_present_mstrs || that_present_mstrs) {
      if (!(this_present_mstrs && that_present_mstrs))
        return false;
      if (!this.mstrs.equals(that.mstrs))
        return false;
    }

    boolean this_present_sint = true && this.isSetSint();
    boolean that_present_sint = true && that.isSetSint();
    if (this_present_sint || that_present_sint) {
      if (!(this_present_sint && that_present_sint))
        return false;
      if (!this.sint.equals(that.sint))
        return false;
    }

    boolean this_present_status = true && this.isSetStatus();
    boolean that_present_status = true && that.isSetStatus();
    if (this_present_status || that_present_status) {
      if (!(this_present_status && that_present_status))
        return false;
      if (!this.status.equals(that.status))
        return false;
    }

    return true;
  }

  @Override
  public int hashCode() {
    List<Object> list = new ArrayList<Object>();

    boolean present_str = true && (isSetStr());
    list.add(present_str);
    if (present_str)
      list.add(str);

    boolean present_flag = true;
    list.add(present_flag);
    if (present_flag)
      list.add(flag);

    boolean present_b = true;
    list.add(present_b);
    if (present_b)
      list.add(b);

    boolean present_int16 = true;
    list.add(present_int16);
    if (present_int16)
      list.add(int16);

    boolean present_int32 = true;
    list.add(present_int32);
    if (present_int32)
      list.add(int32);

    boolean present_int64 = true;
    list.add(present_int64);
    if (present_int64)
      list.add(int64);

    boolean present_d = true;
    list.add(present_d);
    if (present_d)
      list.add(d);

    boolean present_strs = true && (isSetStrs());
    list.add(present_strs);
    if (present_strs)
      list.add(strs);

    boolean present_mstrs = true && (isSetMstrs());
    list.add(present_mstrs);
    if (present_mstrs)
      list.add(mstrs);

    boolean present_sint = true && (isSetSint());
    list.add(present_sint);
    if (present_sint)
      list.add(sint);

    boolean present_status = true && (isSetStatus());
    list.add(present_status);
    if (present_status)
      list.add(status.getValue());

    return list.hashCode();
  }

  @Override
  public int compareTo(BaseMessage other) {
    if (!getClass().equals(other.getClass())) {
      return getClass().getName().compareTo(other.getClass().getName());
    }

    int lastComparison = 0;

    lastComparison = Boolean.valueOf(isSetStr()).compareTo(other.isSetStr());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStr()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.str, other.str);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetFlag()).compareTo(other.isSetFlag());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetFlag()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.flag, other.flag);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetB()).compareTo(other.isSetB());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetB()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.b, other.b);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt16()).compareTo(other.isSetInt16());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt16()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int16, other.int16);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt32()).compareTo(other.isSetInt32());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt32()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int32, other.int32);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetInt64()).compareTo(other.isSetInt64());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetInt64()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.int64, other.int64);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetD()).compareTo(other.isSetD());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetD()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.d, other.d);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStrs()).compareTo(other.isSetStrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.strs, other.strs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetMstrs()).compareTo(other.isSetMstrs());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetMstrs()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.mstrs, other.mstrs);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetSint()).compareTo(other.isSetSint());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetSint()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.sint, other.sint);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    lastComparison = Boolean.valueOf(isSetStatus()).compareTo(other.isSetStatus());
    if (lastComparison != 0) {
      return lastComparison;
    }
    if (isSetStatus()) {
      lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.status, other.status);
      if (lastComparison != 0) {
        return lastComparison;
      }
    }
    return 0;
  }

  public _Fields fieldForId(int fieldId) {
    return _Fields.findByThriftId(fieldId);
  }

  public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
    schemes.get(iprot.getScheme()).getScheme().read(iprot, this);
  }

  public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
    schemes.get(oprot.getScheme()).getScheme().write(oprot, this);
  }

  @Override
  public String toString() {
    StringBuilder sb = new StringBuilder("BaseMessage(");
    boolean first = true;

    sb.append("str:");
    if (this.str == null) {
      sb.append("null");
    } else {
      sb.append(this.str);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("flag:");
    sb.append(this.flag);
    first = false;
    if (!first) sb.append(", ");
    sb.append("b:");
    sb.append(this.b);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int16:");
    sb.append(this.int16);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int32:");
    sb.append(this.int32);
    first = false;
    if (!first) sb.append(", ");
    sb.append("int64:");
    sb.append(this.int64);
    first = false;
    if (!first) sb.append(", ");
    sb.append("d:");
    sb.append(this.d);
    first = false;
    if (!first) sb.append(", ");
    sb.append("strs:");
    if (this.strs == null) {
      sb.append("null");
    } else {
      sb.append(this.strs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("mstrs:");
    if (this.mstrs == null) {
      sb.append("null");
    } else {
      sb.append(this.mstrs);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("sint:");
    if (this.sint == null) {
      sb.append("null");
    } else {
      sb.append(this.sint);
    }
    first = false;
    if (!first) sb.append(", ");
    sb.append("status:");
    if (this.status == null) {
      sb.append("null");
    } else {
      sb.append(this.status);
    }
    first = false;
    sb.append(")");
    return sb.toString();
  }

  public void validate() throws org.apache.thrift.TException {
    // check for required fields
    // check for sub-struct validity
  }

  private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
    try {
      write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
    try {
      // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
      __isset_bitfield = 0;
      read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
    } catch (org.apache.thrift.TException te) {
      throw new java.io.IOException(te);
    }
  }

  private static class BaseMessageStandardSchemeFactory implements SchemeFactory {
    public BaseMessageStandardScheme getScheme() {
      return new BaseMessageStandardScheme();
    }
  }

  private static class BaseMessageStandardScheme extends StandardScheme<BaseMessage> {

    public void read(org.apache.thrift.protocol.TProtocol iprot, BaseMessage struct) throws org.apache.thrift.TException {
      org.apache.thrift.protocol.TField schemeField;
      iprot.readStructBegin();
      while (true)
      {
        schemeField = iprot.readFieldBegin();
        if (schemeField.type == org.apache.thrift.protocol.TType.STOP) { 
          break;
        }
        switch (schemeField.id) {
          case 1: // STR
            if (schemeField.type == org.apache.thrift.protocol.TType.STRING) {
              struct.str = iprot.readString();
              struct.setStrIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 2: // FLAG
            if (schemeField.type == org.apache.thrift.protocol.TType.BOOL) {
              struct.flag = iprot.readBool();
              struct.setFlagIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 3: // B
            if (schemeField.type == org.apache.thrift.protocol.TType.BYTE) {
              struct.b = iprot.readByte();
              struct.setBIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 4: // INT16
            if (schemeField.type == org.apache.thrift.protocol.TType.I16) {
              struct.int16 = iprot.readI16();
              struct.setInt16IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 5: // INT32
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.int32 = iprot.readI32();
              struct.setInt32IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 6: // INT64
            if (schemeField.type == org.apache.thrift.protocol.TType.I64) {
              struct.int64 = iprot.readI64();
              struct.setInt64IsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 7: // D
            if (schemeField.type == org.apache.thrift.protocol.TType.DOUBLE) {
              struct.d = iprot.readDouble();
              struct.setDIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 8: // STRS
            if (schemeField.type == org.apache.thrift.protocol.TType.LIST) {
              {
                org.apache.thrift.protocol.TList _list28 = iprot.readListBegin();
                struct.strs = new ArrayList<String>(_list28.size);
                String _elem29;
                for (int _i30 = 0; _i30 < _list28.size; ++_i30)
                {
                  _elem29 = iprot.readString();
                  struct.strs.add(_elem29);
                }
                iprot.readListEnd();
              }
              struct.setStrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 9: // MSTRS
            if (schemeField.type == org.apache.thrift.protocol.TType.MAP) {
              {
                org.apache.thrift.protocol.TMap _map31 = iprot.readMapBegin();
                struct.mstrs = new HashMap<String,Integer>(2*_map31.size);
                String _key32;
                int _val33;
                for (int _i34 = 0; _i34 < _map31.size; ++_i34)
                {
                  _key32 = iprot.readString();
                  _val33 = iprot.readI32();
                  struct.mstrs.put(_key32, _val33);
                }
                iprot.readMapEnd();
              }
              struct.setMstrsIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 10: // SINT
            if (schemeField.type == org.apache.thrift.protocol.TType.SET) {
              {
                org.apache.thrift.protocol.TSet _set35 = iprot.readSetBegin();
                struct.sint = new HashSet<Integer>(2*_set35.size);
                int _elem36;
                for (int _i37 = 0; _i37 < _set35.size; ++_i37)
                {
                  _elem36 = iprot.readI32();
                  struct.sint.add(_elem36);
                }
                iprot.readSetEnd();
              }
              struct.setSintIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          case 11: // STATUS
            if (schemeField.type == org.apache.thrift.protocol.TType.I32) {
              struct.status = Status.findByValue(iprot.readI32());
              struct.setStatusIsSet(true);
            } else { 
              org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
            }
            break;
          default:
            org.apache.thrift.protocol.TProtocolUtil.skip(iprot, schemeField.type);
        }
        iprot.readFieldEnd();
      }
      iprot.readStructEnd();

      // check for required fields of primitive type, which can't be checked in the validate method
      struct.validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot, BaseMessage struct) throws org.apache.thrift.TException {
      struct.validate();

      oprot.writeStructBegin(STRUCT_DESC);
      if (struct.str != null) {
        oprot.writeFieldBegin(STR_FIELD_DESC);
        oprot.writeString(struct.str);
        oprot.writeFieldEnd();
      }
      oprot.writeFieldBegin(FLAG_FIELD_DESC);
      oprot.writeBool(struct.flag);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(B_FIELD_DESC);
      oprot.writeByte(struct.b);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT16_FIELD_DESC);
      oprot.writeI16(struct.int16);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT32_FIELD_DESC);
      oprot.writeI32(struct.int32);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(INT64_FIELD_DESC);
      oprot.writeI64(struct.int64);
      oprot.writeFieldEnd();
      oprot.writeFieldBegin(D_FIELD_DESC);
      oprot.writeDouble(struct.d);
      oprot.writeFieldEnd();
      if (struct.strs != null) {
        oprot.writeFieldBegin(STRS_FIELD_DESC);
        {
          oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, struct.strs.size()));
          for (String _iter38 : struct.strs)
          {
            oprot.writeString(_iter38);
          }
          oprot.writeListEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.mstrs != null) {
        oprot.writeFieldBegin(MSTRS_FIELD_DESC);
        {
          oprot.writeMapBegin(new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, struct.mstrs.size()));
          for (Map.Entry<String, Integer> _iter39 : struct.mstrs.entrySet())
          {
            oprot.writeString(_iter39.getKey());
            oprot.writeI32(_iter39.getValue());
          }
          oprot.writeMapEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.sint != null) {
        oprot.writeFieldBegin(SINT_FIELD_DESC);
        {
          oprot.writeSetBegin(new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, struct.sint.size()));
          for (int _iter40 : struct.sint)
          {
            oprot.writeI32(_iter40);
          }
          oprot.writeSetEnd();
        }
        oprot.writeFieldEnd();
      }
      if (struct.status != null) {
        oprot.writeFieldBegin(STATUS_FIELD_DESC);
        oprot.writeI32(struct.status.getValue());
        oprot.writeFieldEnd();
      }
      oprot.writeFieldStop();
      oprot.writeStructEnd();
    }

  }

  private static class BaseMessageTupleSchemeFactory implements SchemeFactory {
    public BaseMessageTupleScheme getScheme() {
      return new BaseMessageTupleScheme();
    }
  }

  private static class BaseMessageTupleScheme extends TupleScheme<BaseMessage> {

    @Override
    public void write(org.apache.thrift.protocol.TProtocol prot, BaseMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol oprot = (TTupleProtocol) prot;
      BitSet optionals = new BitSet();
      if (struct.isSetStr()) {
        optionals.set(0);
      }
      if (struct.isSetFlag()) {
        optionals.set(1);
      }
      if (struct.isSetB()) {
        optionals.set(2);
      }
      if (struct.isSetInt16()) {
        optionals.set(3);
      }
      if (struct.isSetInt32()) {
        optionals.set(4);
      }
      if (struct.isSetInt64()) {
        optionals.set(5);
      }
      if (struct.isSetD()) {
        optionals.set(6);
      }
      if (struct.isSetStrs()) {
        optionals.set(7);
      }
      if (struct.isSetMstrs()) {
        optionals.set(8);
      }
      if (struct.isSetSint()) {
        optionals.set(9);
      }
      if (struct.isSetStatus()) {
        optionals.set(10);
      }
      oprot.writeBitSet(optionals, 11);
      if (struct.isSetStr()) {
        oprot.writeString(struct.str);
      }
      if (struct.isSetFlag()) {
        oprot.writeBool(struct.flag);
      }
      if (struct.isSetB()) {
        oprot.writeByte(struct.b);
      }
      if (struct.isSetInt16()) {
        oprot.writeI16(struct.int16);
      }
      if (struct.isSetInt32()) {
        oprot.writeI32(struct.int32);
      }
      if (struct.isSetInt64()) {
        oprot.writeI64(struct.int64);
      }
      if (struct.isSetD()) {
        oprot.writeDouble(struct.d);
      }
      if (struct.isSetStrs()) {
        {
          oprot.writeI32(struct.strs.size());
          for (String _iter41 : struct.strs)
          {
            oprot.writeString(_iter41);
          }
        }
      }
      if (struct.isSetMstrs()) {
        {
          oprot.writeI32(struct.mstrs.size());
          for (Map.Entry<String, Integer> _iter42 : struct.mstrs.entrySet())
          {
            oprot.writeString(_iter42.getKey());
            oprot.writeI32(_iter42.getValue());
          }
        }
      }
      if (struct.isSetSint()) {
        {
          oprot.writeI32(struct.sint.size());
          for (int _iter43 : struct.sint)
          {
            oprot.writeI32(_iter43);
          }
        }
      }
      if (struct.isSetStatus()) {
        oprot.writeI32(struct.status.getValue());
      }
    }

    @Override
    public void read(org.apache.thrift.protocol.TProtocol prot, BaseMessage struct) throws org.apache.thrift.TException {
      TTupleProtocol iprot = (TTupleProtocol) prot;
      BitSet incoming = iprot.readBitSet(11);
      if (incoming.get(0)) {
        struct.str = iprot.readString();
        struct.setStrIsSet(true);
      }
      if (incoming.get(1)) {
        struct.flag = iprot.readBool();
        struct.setFlagIsSet(true);
      }
      if (incoming.get(2)) {
        struct.b = iprot.readByte();
        struct.setBIsSet(true);
      }
      if (incoming.get(3)) {
        struct.int16 = iprot.readI16();
        struct.setInt16IsSet(true);
      }
      if (incoming.get(4)) {
        struct.int32 = iprot.readI32();
        struct.setInt32IsSet(true);
      }
      if (incoming.get(5)) {
        struct.int64 = iprot.readI64();
        struct.setInt64IsSet(true);
      }
      if (incoming.get(6)) {
        struct.d = iprot.readDouble();
        struct.setDIsSet(true);
      }
      if (incoming.get(7)) {
        {
          org.apache.thrift.protocol.TList _list44 = new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.STRING, iprot.readI32());
          struct.strs = new ArrayList<String>(_list44.size);
          String _elem45;
          for (int _i46 = 0; _i46 < _list44.size; ++_i46)
          {
            _elem45 = iprot.readString();
            struct.strs.add(_elem45);
          }
        }
        struct.setStrsIsSet(true);
      }
      if (incoming.get(8)) {
        {
          org.apache.thrift.protocol.TMap _map47 = new org.apache.thrift.protocol.TMap(org.apache.thrift.protocol.TType.STRING, org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.mstrs = new HashMap<String,Integer>(2*_map47.size);
          String _key48;
          int _val49;
          for (int _i50 = 0; _i50 < _map47.size; ++_i50)
          {
            _key48 = iprot.readString();
            _val49 = iprot.readI32();
            struct.mstrs.put(_key48, _val49);
          }
        }
        struct.setMstrsIsSet(true);
      }
      if (incoming.get(9)) {
        {
          org.apache.thrift.protocol.TSet _set51 = new org.apache.thrift.protocol.TSet(org.apache.thrift.protocol.TType.I32, iprot.readI32());
          struct.sint = new HashSet<Integer>(2*_set51.size);
          int _elem52;
          for (int _i53 = 0; _i53 < _set51.size; ++_i53)
          {
            _elem52 = iprot.readI32();
            struct.sint.add(_elem52);
          }
        }
        struct.setSintIsSet(true);
      }
      if (incoming.get(10)) {
        struct.status = Status.findByValue(iprot.readI32());
        struct.setStatusIsSet(true);
      }
    }
  }

}

